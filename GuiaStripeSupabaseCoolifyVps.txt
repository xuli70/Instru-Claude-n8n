(Stripe + Supabase + Coolify en VPS) 

A continuación encontrarás el contenido íntegro del documento original, pero organizado en secciones lógicas y jerárquicas para que puedas localizar cualquier parte con rapidez sin perder ningún detalle técnico ni de código.

Índice
Arquitectura del sistema

Stack tecnológico

Estructura del proyecto

Contenedorización y deployment

Variables de entorno y entrypoint

Configuración central del frontend

Funciones Supabase

Funciones Stripe

Lógica principal de la aplicación

Esquema de base de datos

Variables de entorno en Coolify

Backend mínimo (Node.js)

Sistema de debug y monitoreo

Seguridad y buenas prácticas

Flujo completo de compra

Checklist de deployment

Tips Pro

Recursos esenciales

Metadatos finales

1. Arquitectura del sistema 
scss
Copiar
Editar
┌─────────────────┐     HTTPS      ┌──────────────────┐
│   Tu Dominio    │ ──────────────> │   Coolify VPS    │
│ app.ejemplo.com │                 │   (Hostinger)    │
└─────────────────┘                 └────────┬─────────┘
                                             │
                                    ┌────────┴────────┐
                                    │                 │
                              API Calls         API Calls
                                    │                 │
                                    ▼                 ▼
                          ┌──────────────┐  ┌──────────────┐
                          │   Supabase   │  │    Stripe    │
                          │ (Base Datos) │  │   (Pagos)    │
                          └──────────────┘  └──────────────┘
2. Stack tecnológico 
Frontend: HTML, CSS, JavaScript vanilla

Base de datos: Supabase (PostgreSQL)

Pagos: Stripe Checkout

Deployment: Coolify + Docker

Servidor web: Caddy

VPS: Hostinger

Seguridad: Variables de entorno + RLS

3. Estructura del proyecto 
text
Copiar
Editar
mi-app-stripe-supabase/
├── index.html
├── styles.css
├── config.js
├── supabase.js
├── stripe.js
├── products.js
├── app.js
├── entrypoint.sh
├── Dockerfile
├── .env.example
├── .gitignore
├── backend/
│   ├── server.js
│   ├── package.json
│   └── Dockerfile
└── README.md
4. Contenedorización y deployment 
4.1 Dockerfile universal para Coolify
dockerfile
Copiar
Editar
# Dockerfile para app con Stripe + Supabase
FROM node:18-alpine
WORKDIR /app
RUN apk add --no-cache caddy
COPY *.html ./
COPY *.css ./
COPY *.js ./
COPY entrypoint.sh ./
RUN chmod +x /app/entrypoint.sh
RUN echo -e ":${PORT:-8080} {\n\
    root * /app\n\
    file_server\n\
    try_files {path} /index.html\n\
    \n\
    # Headers de seguridad\n\
    header {\n\
        X-Content-Type-Options nosniff\n\
        X-Frame-Options DENY\n\
        X-XSS-Protection \"1; mode=block\"\n\
        Referrer-Policy strict-origin-when-cross-origin\n\
        Content-Security-Policy \"default-src 'self' https:; script-src 'self' 'unsafe-inline' https://js.stripe.com; style-src 'self' 'unsafe-inline'; frame-src https://js.stripe.com https://hooks.stripe.com;\"\n\
    }\n\
    \n\
    # CORS para APIs\n\
    header Access-Control-Allow-Origin *\n\
    header Access-Control-Allow-Methods \"GET, POST, PUT, DELETE, OPTIONS\"\n\
    header Access-Control-Allow-Headers \"Content-Type, Authorization, X-Requested-With\"\n\
    \n\
    # Proxy para backend (si lo tienes)\n\
    @api {\n\
        path /api/*\n\
    }\n\
    reverse_proxy @api localhost:3000\n\
}" > /app/Caddyfile
EXPOSE 8080
CMD [\"/app/entrypoint.sh\"]
5. Variables de entorno y entrypoint 
5.1 Script entrypoint.sh
bash
Copiar
Editar
#!/bin/sh
# Script universal para inyectar variables de Stripe y Supabase
echo "🚀 Iniciando aplicación..."

cat > /app/env.js << EOF
// Variables de entorno inyectadas por Coolify
window.ENV = {
    // === SUPABASE ===
    SUPABASE_URL: "${SUPABASE_URL}",
    SUPABASE_ANON_KEY: "${SUPABASE_ANON_KEY}",
    
    // === STRIPE ===
    STRIPE_PUBLIC_KEY: "${STRIPE_PUBLIC_KEY}",
    STRIPE_WEBHOOK_SECRET: "${STRIPE_WEBHOOK_SECRET}",
    
    // === BACKEND ===
    API_URL: "${API_URL:-http://localhost:3000}",
    
    // === CONFIGURACIÓN ===
    APP_MODE: "${APP_MODE:-development}",
    ENABLE_DEBUG: "${ENABLE_DEBUG:-false}"
};
...
exec caddy run --config /app/Caddyfile --adapter caddyfile
6. Configuración central del frontend (config.js) 
javascript
Copiar
Editar
// === CONFIGURACIÓN MAESTRA ===
if (!window.ENV) {
    console.error('❌ Variables de entorno no cargadas');
    alert('Error de configuración. Contacta al administrador.');
}

const SUPABASE_CONFIG = { ... };
const STRIPE_CONFIG   = { ... };
const API_CONFIG      = { ... };
const APP_CONFIG      = { ... };

function validateConfig() { ... }

document.addEventListener('DOMContentLoaded', validateConfig);
(el bloque incluye toda la lógica de validación y feature flags original)

7. Funciones Supabase (supabase.js) 
javascript
Copiar
Editar
// === FUNCIONES SUPABASE ===
function getSupabaseUrl(endpoint) { ... }
async function supabaseCreate(table, data) { ... }
async function supabaseRead(table, filters = '') { ... }
async function supabaseUpdate(table, id, data) { ... }
async function supabaseDelete(table, id) { ... }
async function guardarOrdenEnSupabase(orderData) { ... }
async function actualizarEstadoPago(sessionId, status) { ... }
8. Funciones Stripe (stripe.js) 
javascript
Copiar
Editar
// === FUNCIONES STRIPE ===
let stripe = null;
function initializeStripe() { ... }
async function createCheckoutSession(items) { ... }
async function redirectToCheckout(sessionId) { ... }
async function procesarPago(carrito) { ... }
async function verificarPago() { ... }

document.addEventListener('DOMContentLoaded', () => {
    initializeStripe();
    verificarPago();
});
9. Lógica principal de la aplicación (app.js) 
javascript
Copiar
Editar
// === APLICACIÓN PRINCIPAL ===
let carrito   = JSON.parse(localStorage.getItem('carrito')) || [];
let productos = [];
let usuario   = null;

async function initApp() { ... }
async function cargarProductos() { ... }
function mostrarProductos(productos) { ... }
function agregarAlCarrito(productoId) { ... }
function guardarCarrito() { ... }
function actualizarUICarrito() { ... }
async function procesarCheckout() { ... }
...
document.addEventListener('DOMContentLoaded', initApp);
10. Esquema de base de datos (SQL) 
sql
Copiar
Editar
-- Tabla de productos
CREATE TABLE products (...);

-- Tabla de órdenes
CREATE TABLE orders (...);

-- Tabla de clientes (opcional)
CREATE TABLE customers (...);

-- Índices
CREATE INDEX idx_orders_session_id ON orders(stripe_session_id);
CREATE INDEX idx_orders_status     ON orders(status);
CREATE INDEX idx_customers_email   ON customers(email);

-- RLS
ALTER TABLE products  ENABLE ROW LEVEL SECURITY;
ALTER TABLE orders    ENABLE ROW LEVEL SECURITY;
ALTER TABLE customers ENABLE ROW LEVEL SECURITY;

-- Políticas
CREATE POLICY "Products son públicos"  ON products FOR SELECT USING (true);
CREATE POLICY "Orders solo lectura propia" ON orders
    FOR SELECT USING (auth.email() = customer_email);
11. Variables de entorno en Coolify 
env
Copiar
Editar
# === SUPABASE ===
SUPABASE_URL=https://tu-proyecto.supabase.co
SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIs...

# === STRIPE ===
STRIPE_PUBLIC_KEY=pk_test_51ABC...
STRIPE_SECRET_KEY=sk_test_51ABC...
STRIPE_WEBHOOK_SECRET=whsec_...

# === APLICACIÓN ===
API_URL=https://tu-backend.com
APP_MODE=production
ENABLE_DEBUG=false

# === OPCIONAL ===
SENTRY_DSN=https://...
ANALYTICS_ID=G-...
12. Backend mínimo (Node.js) 
javascript
Copiar
Editar
const express = require('express');
const stripe  = require('stripe')(process.env.STRIPE_SECRET_KEY);
const cors    = require('cors');
const app     = express();

app.use(cors());
app.use(express.json());

app.post('/api/stripe/create-checkout-session', async (req, res) => { ... });
app.post('/api/stripe/webhook', express.raw({ type: 'application/json' }), async (req, res) => { ... });

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`Backend corriendo en puerto ${PORT}`));
13. Sistema de debug y monitoreo 
javascript
Copiar
Editar
const Debug = {
    enabled: APP_CONFIG.debug,
    log(...args)   { ... },
    error(...args) { ... },
    table(data)    { ... },
    showPanel()    { ... },
    clearData()    { ... },
    testPayment()  { ... }
};
14. Seguridad y buenas prácticas 
RLS en Supabase

sql
Copiar
Editar
CREATE POLICY "public_products" ON products FOR SELECT USING (true);
CREATE POLICY "own_orders"     ON orders   FOR SELECT USING (auth.email() = customer_email);
Validación de datos

javascript
Copiar
Editar
function validarEmail(email)  { return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email); }
function validarPrecio(precio){ return typeof precio === 'number' && precio >= 50; }
Sanitización

javascript
Copiar
Editar
function sanitizeHtml(str){
    const div = document.createElement('div');
    div.textContent = str;
    return div.innerHTML;
}
HTTPS siempre

Coolify gestiona SSL automáticamente.

Nunca envíes datos sensibles por HTTP.

15. Flujo completo de compra 
markdown
Copiar
Editar
1. Usuario navega productos (Supabase)
   ↓
2. Agrega al carrito (localStorage)
   ↓
3. Click en "Pagar"
   ↓
4. Frontend envía carrito al backend
   ↓
5. Backend crea sesión con Stripe
   ↓
6. Frontend guarda orden en Supabase (pending)
   ↓
7. Redirige a Stripe Checkout
   ↓
8. Usuario completa pago
   ↓
9. Stripe envía webhook al backend
   ↓
10. Backend actualiza orden en Supabase (completed)
    ↓
11. Usuario regresa a success page
    ↓
12. Frontend verifica y muestra confirmación
16. Checklist de deployment 
 Dockerfile con puerto 8080

 entrypoint.sh ejecutable

 Variables en Coolify configuradas

 Supabase: tablas creadas y RLS activo

 Stripe: claves configuradas y webhooks

 Backend desplegado (si lo usas)

 Dominio con SSL

 Testing en modo prueba

 Logs y monitoreo activos

17. Tips Pro 
Stripe CLI para test local

bash
Copiar
Editar
stripe listen --forward-to localhost:3000/api/stripe/webhook
Supabase Realtime para actualizaciones

javascript
Copiar
Editar
const subscription = supabase
  .from('orders')
  .on('UPDATE', payload => {
    console.log('Orden actualizada:', payload);
  })
  .subscribe();
Cache de productos

javascript
Copiar
Editar
const CACHE_KEY = 'products_cache';
const CACHE_TTL = 5 * 60 * 1000;
async function getProductosCached() { ... }
18. Recursos esenciales 
Stripe Testing: https://stripe.com/docs/testing

Supabase JS Client: https://supabase.com/docs/reference/javascript

Coolify Docs: https://coolify.io/docs

Ejemplos de código Stripe: https://github.com/stripe/stripe-samples

19. Metadatos finales 
Stack completo: Stripe + Supabase + Coolify + VPS

Creado para: Tu entorno específico

Mantenido por: Tu conocimiento acumulado

Última actualización: Enero 2025

